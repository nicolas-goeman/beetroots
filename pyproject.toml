[tool.poetry] # https://python-poetry.org/docs/pyproject/
name = "beetroots"
version = "0.1.0"
description = "Beetroots (BayEsian invErsion with spaTial Regularization of nOisy multi-line ObservaTion mapS)"
license = "MIT"
authors = ["ppalud <paludpierre@hotmail.fr>"]
maintainers = ["ppalud <paludpierre@hotmail.fr>"]
readme = "README.md"                                                                                            # path to README file (.md or .rst)
# homepage = "https://github.com/guilgautier/template-python-project" # url
# repository = "https://github.com/guilgautier/template-python-project" # url
# documentation = "https://guilgautier.github.io/template-python-project" # url
keywords = [
    "python",
    "Inverse Problem",
    "Interstellar Medium",
] # at most 5 keywords
classifiers = [
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.9",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Mathematics",
] # https://pypi.org/classifiers/

# https://python-poetry.org/docs/pyproject/#packages
packages = []

# https://python-poetry.org/docs/pyproject/#include-and-exclude
include = []
exclude = [] # ["data/**/*"]

[tool.poetry.dependencies] # https://python-poetry.org/docs/cli/#add
# These packages are mandatory and form the core of this packageâ€™s distribution.
python = ">=3.9,<3.10" # <3.10 required by scipy

# Install latest version of dependency package-name using
# poetry add package-name
# specific the version
numpy = "^1.20.2"

# A list of all of the optional dependencies, some of which are included in the
# below `extras`. They can be opted into by apps.
# poetry add package-name --optional

# Jupyter notebooks within VSCode
jupyter = { version = "^1.0.0", optional = true }

#* Documentation
# configuration in docs/conf.py
Sphinx = { version = ">=5.3.0", optional = true }
# Sphinx extensions https://www.sphinx-doc.org/en/master/usage/extensions/index.html
# Manage bibliography .bib files
# https://github.com/mcmtroffaes/sphinxcontrib-bibtex
sphinxcontrib-bibtex = { version = ">=2.5.0", optional = true }
# Checks syntax of reStructuredText and code blocks nested within it https://github.com/myint/rstcheck
rstcheck = { version = ">=6.1.1", optional = true }
# Language server for .rst files
esbonio = { version = ">=0.15.0", optional = true }
sphinx_rtd_theme = { version = ">=1.2.0", optional = true }
myst_parser = { version = ">=1.0", optional = true }
sphinx_design = { version = ">=0.1.0", optional = true }    # designing beautiful, screen-size responsive web-components.
nbsphinx = { version = ">=0.9.0", optional = true }         # permits to include notebooks in the documentation (relies on pandoc, to be installed separately)
nbsphinx_link = { version = ">=1.0.0", optional = true }    # permits to use notebooks that are not in the docs folder
# sphinx_gallery = { version = ">=0.0.10", optional = true }


tqdm = "^4.62.3"
numba = "^0.54.1"
scikit-learn = "^1.0.1"
pandas = "^1.3.4"
h5py = "^3.6.0"
# sympy = "^1.9"
pre-commit = "^2.15.0"
networkx = "^2.7.1"
click = "8.0.4"

# install github version, due to a bug of bayesian-optimization
bayesian-optimization = { git = "https://github.com/fmfn/BayesianOptimization" }
# icc-rt = "^2020.0.133"
torch = ">=2.0.0, !=2.0.1, !=2.1.0"
matplotlib = "^3.6.2"
nnbma = ">=0.1.2"
# nnbma = { path = "/data4/pierre/ism-model-nn-approximation/", develop = true }
flake8 = "^6.0.0"
cerberus = "^1.3.4"
pylatex = "^1.4.1"


[tool.poetry.extras]
# poetry install -E notebook -E docs

# Jupyter notebooks to be edited in VSCode
notebook = ["jupyter"]

# Documentation is generated with Sphinx
# https://www.sphinx-doc.org/en/master/index.html
# - locally with poetry run sphinx-build -b docs docs/_build/html
# - online either with
#     - ReadTheDocs see .readthedocs.yaml file
#     - GitHub pages see .github/workflows/docs.yml
docs = [
    "Sphinx",
    "sphinxcontrib-bibtex",
    "rstcheck",
    "esbonio",
    "sphinx_rtd_theme",
    "myst_parser",
    "sphinx_design",
    "nbsphinx",
    "nbsphinx_link",
    # "sphinx_gallery",
]

# Development dependencies
# poetry install installs project in editable mode + dev-dependencies
# poetry install --no-dev
[tool.poetry.dev-dependencies]
# poetry add package-name --dev
# see [tool.pytest.ini_options]
pytest = "^6.2.3"      # run the test suite
pytest-cov = "^2.11.1" # generate coverage report see --cov --cov-report flags

# https://pre-commit.com/
pre-commit = "^2.15.0"
# Python "uncompromising" code formatter https://github.com/psf/black
black = ">=22.3.0"
isort = "^5.12.0"
pydocstyle = "^6.1.1"
pylint = "^2.11.1"
# jupyter = "^1.0.0"
# ipywidgets = "^7.6.5"
# plotly = "^5.4.0"

[build-system]
# poetry build
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
# poetry run pytest
minversion = "6.0"
addopts = "-ra -q -vv --cov=beetroots --cov-report=term-missing --cov-report=xml"
testpaths = ["tests"]

# For other tools to be black compliant
# https://black.readthedocs.io/en/stable/guides/using_black_with_other_tools.html
[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.pylint.messages_control]
disable = "C0330, C0326"

[tool.pylint.format]
max-line-length = "88"
